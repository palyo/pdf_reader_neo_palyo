package com.pdf.read.view.pdfreader.pdfviewer.pdfeditor.activities.tools.scanner.adapterimport android.content.*import android.view.*import androidx.recyclerview.widget.*import androidx.viewpager2.widget.*import com.bumptech.glide.*import com.bumptech.glide.request.*import com.pdf.read.view.pdfreader.pdfviewer.pdfeditor.databinding.LayoutRowItemAddScannedBindingimport com.pdf.read.view.pdfreader.pdfviewer.pdfeditor.databinding.LayoutRowItemSavedBindingclass PagerSavedAdapter(val context: Context, val isIDCard: Boolean, private val addPage: () -> Unit) : RecyclerView.Adapter<RecyclerView.ViewHolder>() {    private var paths = mutableListOf<String>()    companion object {        private const val TYPE_NORMAL = 0        private const val TYPE_ADD_NEW = 1    }    val allPaths: MutableList<String>        get() = paths    fun addAll(paths: MutableList<String>) {        this.paths.clear()        this.paths.addAll(paths)        notifyDataSetChanged()    }    fun addPages(paths: MutableList<String>) {        val startPosition = this.paths.size        this.paths.addAll(paths)        notifyItemRangeInserted(startPosition, paths.size)    }    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {        return if (viewType == TYPE_NORMAL) {            DataViewHolder(LayoutRowItemSavedBinding.inflate(LayoutInflater.from(parent.context), parent, false))        } else {            AddNewViewHolder(LayoutRowItemAddScannedBinding.inflate(LayoutInflater.from(parent.context), parent, false))        }    }    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {        when (holder) {            is DataViewHolder -> {                holder.binding.apply {                    val path = paths[position]                    Glide.with(imageView.context)                            .load(path)                            .thumbnail(0.1f)                            .apply(RequestOptions()                                    .centerCrop()                                    .skipMemoryCache(false)                                    .dontTransform()                                    .dontAnimate())                            .into(imageView)                }            }            is AddNewViewHolder -> {                holder.binding.apply {                    root.setOnClickListener {                        addPage.invoke()                    }                }            }        }    }    override fun getItemCount(): Int {        if (isIDCard) {            return paths.size        }        return paths.size + 1    }    override fun getItemViewType(position: Int): Int {        return if (position == paths.size) TYPE_ADD_NEW else TYPE_NORMAL    }    private fun getViewHolderForPosition(viewPager: ViewPager2): DataViewHolder? {        val recyclerView = viewPager.getChildAt(0) as? RecyclerView        return recyclerView?.findViewHolderForAdapterPosition(viewPager.currentItem) as? DataViewHolder    }    class DataViewHolder(val binding: LayoutRowItemSavedBinding) : RecyclerView.ViewHolder(binding.root)    class AddNewViewHolder(val binding: LayoutRowItemAddScannedBinding) : RecyclerView.ViewHolder(binding.root)}