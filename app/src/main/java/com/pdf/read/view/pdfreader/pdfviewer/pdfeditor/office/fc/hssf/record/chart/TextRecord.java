package com.pdf.read.view.pdfreader.pdfviewer.pdfeditor.office.fc.hssf.record.chart;

import com.pdf.read.view.pdfreader.pdfviewer.pdfeditor.office.fc.hssf.record.RecordInputStream;
import com.pdf.read.view.pdfreader.pdfviewer.pdfeditor.office.fc.hssf.record.StandardRecord;
import com.pdf.read.view.pdfreader.pdfviewer.pdfeditor.office.fc.hssf.record.UnknownRecord;
import com.pdf.read.view.pdfreader.pdfviewer.pdfeditor.office.fc.util.BitField;
import com.pdf.read.view.pdfreader.pdfviewer.pdfeditor.office.fc.util.BitFieldFactory;
import com.pdf.read.view.pdfreader.pdfviewer.pdfeditor.office.fc.util.HexDump;
import com.pdf.read.view.pdfreader.pdfviewer.pdfeditor.office.fc.util.LittleEndian;
import com.pdf.read.view.pdfreader.pdfviewer.pdfeditor.office.fc.util.LittleEndianOutput;

public final class TextRecord extends StandardRecord {
    public final static short sid = 0x1025;
    public final static byte HORIZONTAL_ALIGNMENT_CENTER = 2;
    public final static byte VERTICAL_ALIGNMENT_CENTER = 2;
    public final static short DISPLAY_MODE_TRANSPARENT = 1;
    private static final BitField dataLabelPlacement = BitFieldFactory.getInstance(0x000F);
    private static final BitField autoColor = BitFieldFactory.getInstance(0x0001);
    private static final BitField showKey = BitFieldFactory.getInstance(0x0002);
    private static final BitField showValue = BitFieldFactory.getInstance(0x0004);
    private static final BitField vertical = BitFieldFactory.getInstance(0x0008);
    private static final BitField autoGeneratedText = BitFieldFactory.getInstance(0x0010);
    private static final BitField generated = BitFieldFactory.getInstance(0x0020);
    private static final BitField autoLabelDeleted = BitFieldFactory.getInstance(0x0040);
    private static final BitField autoBackground = BitFieldFactory.getInstance(0x0080);
    private static final BitField rotation = BitFieldFactory.getInstance(0x0700);
    private static final BitField showCategoryLabelAsPercentage = BitFieldFactory.getInstance(0x0800);
    private static final BitField showValueAsPercentage = BitFieldFactory.getInstance(0x1000);
    private static final BitField showBubbleSizes = BitFieldFactory.getInstance(0x2000);
    private static final BitField showLabel = BitFieldFactory.getInstance(0x4000);
    private byte field_1_horizontalAlignment;
    private byte field_2_verticalAlignment;
    private short field_3_displayMode;
    private int field_4_rgbColor;
    private int field_5_x;
    private int field_6_y;
    private int field_7_width;
    private int field_8_height;
    private short field_9_options1;
    private short field_10_indexOfColorValue;
    private short field_11_options2;
    private short field_12_textRotation;

    public TextRecord() {

    }

    public TextRecord(UnknownRecord unknownRecord) {
        if (unknownRecord.getSid() == TextRecord.sid && unknownRecord.getData().length == getDataSize()) {
            byte[] data = unknownRecord.getData();

            field_1_horizontalAlignment = (byte) LittleEndian.getUnsignedByte(data, 0);
            field_2_verticalAlignment = (byte) LittleEndian.getUnsignedByte(data, 1);
            field_3_displayMode = LittleEndian.getShort(data, 2);
            field_4_rgbColor = LittleEndian.getInt(data, 4);
            field_5_x = LittleEndian.getInt(data, 8);
            field_6_y = LittleEndian.getInt(data, 12);
            field_7_width = LittleEndian.getInt(data, 16);
            field_8_height = LittleEndian.getInt(data, 20);
            field_9_options1 = LittleEndian.getShort(data, 24);
            field_10_indexOfColorValue = LittleEndian.getShort(data, 26);
            field_11_options2 = LittleEndian.getShort(data, 28);
            field_12_textRotation = LittleEndian.getShort(data, 30);
        }
    }

    public TextRecord(RecordInputStream in) {
        field_1_horizontalAlignment = in.readByte();
        field_2_verticalAlignment = in.readByte();
        field_3_displayMode = in.readShort();
        field_4_rgbColor = in.readInt();
        field_5_x = in.readInt();
        field_6_y = in.readInt();
        field_7_width = in.readInt();
        field_8_height = in.readInt();
        field_9_options1 = in.readShort();
        field_10_indexOfColorValue = in.readShort();
        field_11_options2 = in.readShort();
        field_12_textRotation = in.readShort();
    }

    public String toString() {

        String buffer = "[TEXT]\n" +
                "    .horizontalAlignment  = " +
                "0x" + HexDump.toHex(getHorizontalAlignment()) +
                " (" + getHorizontalAlignment() + " )" +
                System.getProperty("line.separator") +
                "    .verticalAlignment    = " +
                "0x" + HexDump.toHex(getVerticalAlignment()) +
                " (" + getVerticalAlignment() + " )" +
                System.getProperty("line.separator") +
                "    .displayMode          = " +
                "0x" + HexDump.toHex(getDisplayMode()) +
                " (" + getDisplayMode() + " )" +
                System.getProperty("line.separator") +
                "    .rgbColor             = " +
                "0x" + HexDump.toHex(getRgbColor()) +
                " (" + getRgbColor() + " )" +
                System.getProperty("line.separator") +
                "    .x                    = " +
                "0x" + HexDump.toHex(getX()) +
                " (" + getX() + " )" +
                System.getProperty("line.separator") +
                "    .y                    = " +
                "0x" + HexDump.toHex(getY()) +
                " (" + getY() + " )" +
                System.getProperty("line.separator") +
                "    .width                = " +
                "0x" + HexDump.toHex(getWidth()) +
                " (" + getWidth() + " )" +
                System.getProperty("line.separator") +
                "    .height               = " +
                "0x" + HexDump.toHex(getHeight()) +
                " (" + getHeight() + " )" +
                System.getProperty("line.separator") +
                "    .options1             = " +
                "0x" + HexDump.toHex(getOptions1()) +
                " (" + getOptions1() + " )" +
                System.getProperty("line.separator") +
                "         .autoColor                = " + isAutoColor() + '\n' +
                "         .showKey                  = " + isShowKey() + '\n' +
                "         .showValue                = " + isShowValue() + '\n' +
                "         .vertical                 = " + isVertical() + '\n' +
                "         .autoGeneratedText        = " + isAutoGeneratedText() + '\n' +
                "         .generated                = " + isGenerated() + '\n' +
                "         .autoLabelDeleted         = " + isAutoLabelDeleted() + '\n' +
                "         .autoBackground           = " + isAutoBackground() + '\n' +
                "         .rotation                 = " + getRotation() + '\n' +
                "         .showCategoryLabelAsPercentage     = " + isShowCategoryLabelAsPercentage() + '\n' +
                "         .showValueAsPercentage     = " + isShowValueAsPercentage() + '\n' +
                "         .showBubbleSizes          = " + isShowBubbleSizes() + '\n' +
                "         .showLabel                = " + isShowLabel() + '\n' +
                "    .indexOfColorValue    = " +
                "0x" + HexDump.toHex(getIndexOfColorValue()) +
                " (" + getIndexOfColorValue() + " )" +
                System.getProperty("line.separator") +
                "    .options2             = " +
                "0x" + HexDump.toHex(getOptions2()) +
                " (" + getOptions2() + " )" +
                System.getProperty("line.separator") +
                "         .dataLabelPlacement       = " + getDataLabelPlacement() + '\n' +
                "    .textRotation         = " +
                "0x" + HexDump.toHex(getTextRotation()) +
                " (" + getTextRotation() + " )" +
                System.getProperty("line.separator") +
                "[/TEXT]\n";
        return buffer;
    }

    public void serialize(LittleEndianOutput out) {
        out.writeByte(field_1_horizontalAlignment);
        out.writeByte(field_2_verticalAlignment);
        out.writeShort(field_3_displayMode);
        out.writeInt(field_4_rgbColor);
        out.writeInt(field_5_x);
        out.writeInt(field_6_y);
        out.writeInt(field_7_width);
        out.writeInt(field_8_height);
        out.writeShort(field_9_options1);
        out.writeShort(field_10_indexOfColorValue);
        out.writeShort(field_11_options2);
        out.writeShort(field_12_textRotation);
    }

    protected int getDataSize() {
        return 1 + 1 + 2 + 4 + 4 + 4 + 4 + 4 + 2 + 2 + 2 + 2;
    }

    public short getSid() {
        return sid;
    }

    public Object clone() {
        TextRecord rec = new TextRecord();

        rec.field_1_horizontalAlignment = field_1_horizontalAlignment;
        rec.field_2_verticalAlignment = field_2_verticalAlignment;
        rec.field_3_displayMode = field_3_displayMode;
        rec.field_4_rgbColor = field_4_rgbColor;
        rec.field_5_x = field_5_x;
        rec.field_6_y = field_6_y;
        rec.field_7_width = field_7_width;
        rec.field_8_height = field_8_height;
        rec.field_9_options1 = field_9_options1;
        rec.field_10_indexOfColorValue = field_10_indexOfColorValue;
        rec.field_11_options2 = field_11_options2;
        rec.field_12_textRotation = field_12_textRotation;
        return rec;
    }

    public byte getHorizontalAlignment() {
        return field_1_horizontalAlignment;
    }

    public void setHorizontalAlignment(byte field_1_horizontalAlignment) {
        this.field_1_horizontalAlignment = field_1_horizontalAlignment;
    }

    public byte getVerticalAlignment() {
        return field_2_verticalAlignment;
    }

    public void setVerticalAlignment(byte field_2_verticalAlignment) {
        this.field_2_verticalAlignment = field_2_verticalAlignment;
    }

    public short getDisplayMode() {
        return field_3_displayMode;
    }

    public void setDisplayMode(short field_3_displayMode) {
        this.field_3_displayMode = field_3_displayMode;
    }

    public int getRgbColor() {
        return field_4_rgbColor;
    }

    public void setRgbColor(int field_4_rgbColor) {
        this.field_4_rgbColor = field_4_rgbColor;
    }

    public int getX() {
        return field_5_x;
    }

    public void setX(int field_5_x) {
        this.field_5_x = field_5_x;
    }

    public int getY() {
        return field_6_y;
    }

    public void setY(int field_6_y) {
        this.field_6_y = field_6_y;
    }

    public int getWidth() {
        return field_7_width;
    }

    public void setWidth(int field_7_width) {
        this.field_7_width = field_7_width;
    }

    public int getHeight() {
        return field_8_height;
    }

    public void setHeight(int field_8_height) {
        this.field_8_height = field_8_height;
    }

    public short getOptions1() {
        return field_9_options1;
    }

    public void setOptions1(short field_9_options1) {
        this.field_9_options1 = field_9_options1;
    }

    public short getIndexOfColorValue() {
        return field_10_indexOfColorValue;
    }

    public void setIndexOfColorValue(short field_10_indexOfColorValue) {
        this.field_10_indexOfColorValue = field_10_indexOfColorValue;
    }

    public short getOptions2() {
        return field_11_options2;
    }

    public void setOptions2(short field_11_options2) {
        this.field_11_options2 = field_11_options2;
    }

    public short getTextRotation() {
        return field_12_textRotation;
    }

    public void setTextRotation(short field_12_textRotation) {
        this.field_12_textRotation = field_12_textRotation;
    }

    public boolean isAutoColor() {
        return autoColor.isSet(field_9_options1);
    }

    public void setAutoColor(boolean value) {
        field_9_options1 = autoColor.setShortBoolean(field_9_options1, value);
    }

    public boolean isShowKey() {
        return showKey.isSet(field_9_options1);
    }

    public void setShowKey(boolean value) {
        field_9_options1 = showKey.setShortBoolean(field_9_options1, value);
    }

    public boolean isShowValue() {
        return showValue.isSet(field_9_options1);
    }

    public void setShowValue(boolean value) {
        field_9_options1 = showValue.setShortBoolean(field_9_options1, value);
    }

    public boolean isVertical() {
        return vertical.isSet(field_9_options1);
    }

    public void setVertical(boolean value) {
        field_9_options1 = vertical.setShortBoolean(field_9_options1, value);
    }

    public boolean isAutoGeneratedText() {
        return autoGeneratedText.isSet(field_9_options1);
    }

    public void setAutoGeneratedText(boolean value) {
        field_9_options1 = autoGeneratedText.setShortBoolean(field_9_options1, value);
    }

    public boolean isGenerated() {
        return generated.isSet(field_9_options1);
    }

    public void setGenerated(boolean value) {
        field_9_options1 = generated.setShortBoolean(field_9_options1, value);
    }

    public boolean isAutoLabelDeleted() {
        return autoLabelDeleted.isSet(field_9_options1);
    }

    public void setAutoLabelDeleted(boolean value) {
        field_9_options1 = autoLabelDeleted.setShortBoolean(field_9_options1, value);
    }

    public boolean isAutoBackground() {
        return autoBackground.isSet(field_9_options1);
    }

    public void setAutoBackground(boolean value) {
        field_9_options1 = autoBackground.setShortBoolean(field_9_options1, value);
    }

    public short getRotation() {
        return rotation.getShortValue(field_9_options1);
    }

    public void setRotation(short value) {
        field_9_options1 = rotation.setShortValue(field_9_options1, value);
    }

    public boolean isShowCategoryLabelAsPercentage() {
        return showCategoryLabelAsPercentage.isSet(field_9_options1);
    }

    public void setShowCategoryLabelAsPercentage(boolean value) {
        field_9_options1 = showCategoryLabelAsPercentage.setShortBoolean(field_9_options1, value);
    }

    public boolean isShowValueAsPercentage() {
        return showValueAsPercentage.isSet(field_9_options1);
    }

    public void setShowValueAsPercentage(boolean value) {
        field_9_options1 = showValueAsPercentage.setShortBoolean(field_9_options1, value);
    }

    public boolean isShowBubbleSizes() {
        return showBubbleSizes.isSet(field_9_options1);
    }

    public void setShowBubbleSizes(boolean value) {
        field_9_options1 = showBubbleSizes.setShortBoolean(field_9_options1, value);
    }

    public boolean isShowLabel() {
        return showLabel.isSet(field_9_options1);
    }

    public void setShowLabel(boolean value) {
        field_9_options1 = showLabel.setShortBoolean(field_9_options1, value);
    }

    public short getDataLabelPlacement() {
        return dataLabelPlacement.getShortValue(field_11_options2);
    }

    public void setDataLabelPlacement(short value) {
        field_11_options2 = dataLabelPlacement.setShortValue(field_11_options2, value);
    }
}
