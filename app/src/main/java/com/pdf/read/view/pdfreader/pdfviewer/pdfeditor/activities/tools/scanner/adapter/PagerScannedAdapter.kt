package com.pdf.read.view.pdfreader.pdfviewer.pdfeditor.activities.tools.scanner.adapterimport android.content.*import android.graphics.*import android.os.*import android.view.*import androidx.constraintlayout.widget.*import androidx.recyclerview.widget.*import androidx.viewpager2.widget.*import coder.apps.space.library.extension.beGoneimport coder.apps.space.library.extension.beInvisibleimport coder.apps.space.library.extension.beVisibleimport com.bumptech.glide.*import com.bumptech.glide.load.*import com.bumptech.glide.load.engine.*import com.bumptech.glide.request.*import com.bumptech.glide.request.target.Targetimport com.pdf.read.view.pdfreader.pdfviewer.pdfeditor.databinding.LayoutRowItemAddScannedBindingimport com.pdf.read.view.pdfreader.pdfviewer.pdfeditor.databinding.LayoutRowItemEditScannedBindingimport com.pdf.read.view.pdfreader.pdfviewer.pdfeditor.ext.correctImageRotationimport com.pdf.read.view.pdfreader.pdfviewer.pdfeditor.filter.GPUBWFilterimport documentreader.pdfviewer.filereader.documenttools.model.*import jp.co.cyberagent.android.gpuimage.*import jp.co.cyberagent.android.gpuimage.filter.*import kotlinx.coroutines.*const val FILTER_ORIGINAL = 1const val FILTER_BW = 2const val FILTER_SKETCH = 3const val FILTER_MONOCHROME = 4const val FILTER_TOON = 5const val FILTER_SHARPEN = 6const val FILTER_CONTRAST = 7const val FILTER_BRIGHTNESS = 8class PagerScannedAdapter(val context: Context, val isIDCard: Boolean, private val addPage: () -> Unit) : RecyclerView.Adapter<RecyclerView.ViewHolder>() {    private var paths = mutableListOf<DocSave>()    val allDocs: MutableList<DocSave>        get() = paths    companion object {        private const val TYPE_NORMAL = 0        private const val TYPE_ADD_NEW = 1    }    fun addAll(paths: MutableList<DocSave>) {        this.paths.clear()        this.paths.addAll(paths)        notifyDataSetChanged()    }    fun addPages(paths: MutableList<DocSave>) {        this.paths.addAll(paths)        notifyDataSetChanged()    }    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {        return if (viewType == TYPE_NORMAL) {            DataViewHolder(LayoutRowItemEditScannedBinding.inflate(LayoutInflater.from(parent.context), parent, false))        } else {            AddNewViewHolder(LayoutRowItemAddScannedBinding.inflate(LayoutInflater.from(parent.context), parent, false))        }    }    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {        when (holder) {            is DataViewHolder -> {                holder.binding.apply {                    val doc = paths[position]                    progressCircular.beVisible()                    CoroutineScope(Dispatchers.IO).launch {                        val bitmap = doc.bitmap ?: correctImageRotation(doc.path)                        launch(Dispatchers.Main) {                            val cropLayoutParams = imageCrop.layoutParams as ConstraintLayout.LayoutParams                            cropLayoutParams.dimensionRatio = "${bitmap.width}:${bitmap.height}"                            imageCrop.setLayoutParams(cropLayoutParams)                            imageCrop.setImageToCrop(bitmap)                            progressCircular.beGone()                        }                    }                }            }            is AddNewViewHolder -> {                holder.binding.apply {                    root.setOnClickListener {                        addPage.invoke()                    }                }            }        }    }    override fun getItemCount(): Int {        //        if (isIDCard) {        return paths.size        //        }        //        return paths.size + 1    }    override fun getItemViewType(position: Int): Int {        return if (position == paths.size) TYPE_ADD_NEW else TYPE_NORMAL    }    fun autoCrop(viewPager: ViewPager2) {        getViewHolderForPosition(viewPager) {            it.binding.apply {                imageCrop.setAutoImgCrop()            }        }    }    private fun getViewHolderForPosition(viewPager: ViewPager2, callback: (DataViewHolder) -> Unit) {        val recyclerView = viewPager.getChildAt(0) as? RecyclerView        if (recyclerView != null) {            val viewHolder = recyclerView.findViewHolderForAdapterPosition(viewPager.currentItem) as? DataViewHolder            if (viewHolder != null) {                callback.invoke(viewHolder)            } else {                // Retry mechanism with a delay                Handler(Looper.getMainLooper()).postDelayed({                    getViewHolderForPosition(viewPager, callback)                }, 100)            }        }    }    private fun getViewHolderForPosition(viewPager: ViewPager2, index: Int, callback: (DataViewHolder) -> Unit) {        val recyclerView = viewPager.getChildAt(0) as? RecyclerView        if (recyclerView != null) {            val viewHolder = recyclerView.findViewHolderForAdapterPosition(index) as? DataViewHolder            if (viewHolder != null) {                callback.invoke(viewHolder)            } else {                Handler(Looper.getMainLooper()).postDelayed({                    getViewHolderForPosition(viewPager, index, callback)                }, 100)            }        }    }    private fun getViewHolderForPosition(viewPager: ViewPager2): DataViewHolder? {        val recyclerView = viewPager.getChildAt(0) as? RecyclerView        return recyclerView?.findViewHolderForAdapterPosition(viewPager.currentItem) as? DataViewHolder    }    fun fullCrop(viewPager: ViewPager2) {        getViewHolderForPosition(viewPager) {            it.binding.apply {                imageCrop.setFullImgCrop()            }        }    }    fun updateItem(viewPager: ViewPager2, newPath: String) {        paths[viewPager.currentItem] = DocSave(newPath, FILTER_ORIGINAL, correctImageRotation(newPath))        notifyItemChanged(viewPager.currentItem)    }    fun updateTool(viewPager: ViewPager2, tool: Int) {        getViewHolderForPosition(viewPager) {            it.binding.apply {                when (tool) {                    1 -> { // filter                        layoutGpuView.beVisible()                        gpuImageView.beVisible()                        imageCrop.beInvisible()                        val pos = viewPager.currentItem                        val bitmap = paths[pos].bitmap ?: correctImageRotation(paths[pos].path)                        when (paths[pos].filter) {                            FILTER_ORIGINAL -> { // original                                val gpuImage = GPUImage(gpuImageView.context)                                gpuImage.setFilter(GPUImageFilter())                                applyFilterGlide(gpuImage, bitmap)                                paths[viewPager.currentItem] = DocSave(paths[viewPager.currentItem].path, FILTER_ORIGINAL, bitmap)                            }                            FILTER_BW -> { // b/w                                val filter = GPUBWFilter(2.0f)                                filter.setBlendBitmap(bitmap)                                val gpuImage = GPUImage(gpuImageView.context)                                gpuImage.setFilter(filter)                                applyFilterGlide(gpuImage, bitmap)                                paths[viewPager.currentItem] = DocSave(paths[viewPager.currentItem].path, FILTER_BW, bitmap)                            }                            FILTER_SKETCH -> { // sketch                                val gpuImage = GPUImage(gpuImageView.context)                                gpuImage.setFilter(GPUImageSketchFilter())                                applyFilterGlide(gpuImage, bitmap)                                paths[viewPager.currentItem] = DocSave(paths[viewPager.currentItem].path, FILTER_SKETCH, bitmap)                            }                            FILTER_MONOCHROME -> { // monochrome                                val gpuImage = GPUImage(gpuImageView.context)                                gpuImage.setFilter(GPUImageMonochromeFilter())                                applyFilterGlide(gpuImage, bitmap)                                paths[viewPager.currentItem] = DocSave(paths[viewPager.currentItem].path, FILTER_MONOCHROME, bitmap)                            }                            FILTER_TOON -> { // toon                                val gpuImage = GPUImage(gpuImageView.context)                                gpuImage.setFilter(GPUImageToonFilter())                                applyFilterGlide(gpuImage, bitmap)                                paths[viewPager.currentItem] = DocSave(paths[viewPager.currentItem].path, FILTER_TOON, bitmap)                            }                            FILTER_SHARPEN -> { // sharpen                                val gpuImage = GPUImage(gpuImageView.context)                                gpuImage.setFilter(GPUImageSharpenFilter())                                applyFilterGlide(gpuImage, bitmap)                                paths[viewPager.currentItem] = DocSave(paths[viewPager.currentItem].path, FILTER_SHARPEN, bitmap)                            }                            FILTER_CONTRAST -> { // contrast                                val gpuImage = GPUImage(gpuImageView.context)                                gpuImage.setFilter(GPUImageContrastFilter(2F))                                applyFilterGlide(gpuImage, bitmap)                                paths[viewPager.currentItem] = DocSave(paths[viewPager.currentItem].path, FILTER_SKETCH, bitmap)                            }                            FILTER_BRIGHTNESS -> { // brightness                                val gpuImage = GPUImage(gpuImageView.context)                                gpuImage.setFilter(GPUImageBrightnessFilter(0.2F))                                applyFilterGlide(gpuImage, bitmap)                                paths[viewPager.currentItem] = DocSave(paths[viewPager.currentItem].path, FILTER_SKETCH, bitmap)                            }                        }                    }                    2 -> { // crop                        layoutGpuView.beInvisible()                        gpuImageView.beInvisible()                        imageCrop.beVisible()                    }                    4 -> { // delete                        paths.removeAt(viewPager.currentItem)                        notifyItemRemoved(viewPager.currentItem)                    }                }            }        }    }    fun applyFilter(viewPager: ViewPager2, tool: Int, isApplyToAll: Boolean) {        if (isApplyToAll) {            paths.forEachIndexed { index, path ->                val recyclerView = viewPager.getChildAt(0) as? RecyclerView                val holder = recyclerView?.findViewHolderForAdapterPosition(index) as? DataViewHolder                holder?.binding?.apply {                    val bitmap = path.bitmap ?: correctImageRotation(path.path)                    when (tool) {                        FILTER_ORIGINAL -> { // original                            val gpuImage = GPUImage(gpuImageView.context)                            gpuImage.setFilter(GPUImageFilter())                            applyFilterGlide(gpuImage, bitmap)                            paths[index] = DocSave(path.path, FILTER_ORIGINAL, bitmap)                        }                        FILTER_BW -> { // b/w                            val filter = GPUBWFilter(2.0f)                            filter.setBlendBitmap(bitmap)                            val gpuImage = GPUImage(gpuImageView.context)                            gpuImage.setFilter(filter)                            applyFilterGlide(gpuImage, bitmap)                            paths[index] = DocSave(path.path, FILTER_BW, bitmap)                        }                        FILTER_SKETCH -> { // sketch                            val gpuImage = GPUImage(gpuImageView.context)                            gpuImage.setFilter(GPUImageSketchFilter())                            applyFilterGlide(gpuImage, bitmap)                            paths[index] = DocSave(path.path, FILTER_SKETCH, bitmap)                        }                        FILTER_MONOCHROME -> { // monochrome                            val gpuImage = GPUImage(gpuImageView.context)                            gpuImage.setFilter(GPUImageMonochromeFilter())                            applyFilterGlide(gpuImage, bitmap)                            paths[index] = DocSave(path.path, FILTER_MONOCHROME, bitmap)                        }                        FILTER_TOON -> { // toon                            val gpuImage = GPUImage(gpuImageView.context)                            gpuImage.setFilter(GPUImageToonFilter())                            applyFilterGlide(gpuImage, bitmap)                            paths[index] = DocSave(path.path, FILTER_TOON, bitmap)                        }                        FILTER_SHARPEN -> { // sharpen                            val gpuImage = GPUImage(gpuImageView.context)                            gpuImage.setFilter(GPUImageSharpenFilter())                            applyFilterGlide(gpuImage, bitmap)                            paths[index] = DocSave(path.path, FILTER_SHARPEN, bitmap)                        }                        FILTER_CONTRAST -> { // contrast                            val gpuImage = GPUImage(gpuImageView.context)                            gpuImage.setFilter(GPUImageContrastFilter(2F))                            applyFilterGlide(gpuImage, bitmap)                            paths[index] = DocSave(path.path, FILTER_SKETCH, bitmap)                        }                        FILTER_BRIGHTNESS -> { // brightness                            val gpuImage = GPUImage(gpuImageView.context)                            gpuImage.setFilter(GPUImageBrightnessFilter(0.2F))                            applyFilterGlide(gpuImage, bitmap)                            paths[index] = DocSave(path.path, FILTER_SKETCH, bitmap)                        }                    }                }            }            return        }        getViewHolderForPosition(viewPager) {            it.binding.apply {                val bitmap = paths[viewPager.currentItem].bitmap ?: correctImageRotation(paths[viewPager.currentItem].path)                paths[viewPager.currentItem].filter = tool                when (tool) {                    FILTER_ORIGINAL -> { // original                        val gpuImage = GPUImage(gpuImageView.context)                        gpuImage.setFilter(GPUImageFilter())                        applyFilterGlide(gpuImage, bitmap)                        paths[viewPager.currentItem] = DocSave(paths[viewPager.currentItem].path, FILTER_ORIGINAL, bitmap)                    }                    FILTER_BW -> { // b/w                        val filter = GPUBWFilter(2.0f)                        filter.setBlendBitmap(bitmap)                        val gpuImage = GPUImage(gpuImageView.context)                        gpuImage.setFilter(filter)                        applyFilterGlide(gpuImage, bitmap)                        paths[viewPager.currentItem] = DocSave(paths[viewPager.currentItem].path, FILTER_BW, bitmap)                    }                    FILTER_SKETCH -> { // sketch                        val gpuImage = GPUImage(gpuImageView.context)                        gpuImage.setFilter(GPUImageSketchFilter())                        applyFilterGlide(gpuImage, bitmap)                        paths[viewPager.currentItem] = DocSave(paths[viewPager.currentItem].path, FILTER_SKETCH, bitmap)                    }                    FILTER_MONOCHROME -> { // monochrome                        val gpuImage = GPUImage(gpuImageView.context)                        gpuImage.setFilter(GPUImageMonochromeFilter())                        applyFilterGlide(gpuImage, bitmap)                        paths[viewPager.currentItem] = DocSave(paths[viewPager.currentItem].path, FILTER_MONOCHROME, bitmap)                    }                    FILTER_TOON -> { // toon                        val gpuImage = GPUImage(gpuImageView.context)                        gpuImage.setFilter(GPUImageToonFilter())                        applyFilterGlide(gpuImage, bitmap)                        paths[viewPager.currentItem] = DocSave(paths[viewPager.currentItem].path, FILTER_TOON, bitmap)                    }                    FILTER_SHARPEN -> { // sharpen                        val gpuImage = GPUImage(gpuImageView.context)                        gpuImage.setFilter(GPUImageSharpenFilter())                        applyFilterGlide(gpuImage, bitmap)                        paths[viewPager.currentItem] = DocSave(paths[viewPager.currentItem].path, FILTER_SHARPEN, bitmap)                    }                    FILTER_CONTRAST -> { // contrast                        val gpuImage = GPUImage(gpuImageView.context)                        gpuImage.setFilter(GPUImageContrastFilter(2F))                        applyFilterGlide(gpuImage, bitmap)                        paths[viewPager.currentItem] = DocSave(paths[viewPager.currentItem].path, FILTER_SKETCH, bitmap)                    }                    FILTER_BRIGHTNESS -> { // brightness                        val gpuImage = GPUImage(gpuImageView.context)                        gpuImage.setFilter(GPUImageBrightnessFilter(0.2F))                        applyFilterGlide(gpuImage, bitmap)                        paths[viewPager.currentItem] = DocSave(paths[viewPager.currentItem].path, FILTER_SKETCH, bitmap)                    }                }            }        }    }    private fun LayoutRowItemEditScannedBinding.applyFilterGlide(gpuImage: GPUImage, bitmap: Bitmap) {        progressCircular.beVisible()        Glide.with(gpuImageView.context)                .asBitmap()                .load(gpuImage.getBitmapWithFilterApplied(bitmap))                .thumbnail(0.1f)                .apply(RequestOptions()                        .centerCrop()                        .skipMemoryCache(false)                        .dontTransform()                        .dontAnimate())                .listener(bitmapCallback { progressCircular.beGone() })                .into(gpuImageView)    }    fun bitmapCallback(listener: () -> Unit): RequestListener<Bitmap> {        return object : RequestListener<Bitmap> {            override fun onLoadFailed(                e: GlideException?, model: Any?, target: Target<Bitmap?>,                isFirstResource: Boolean,            ): Boolean {listener.invoke()                return false            }            override fun onResourceReady(                resource: Bitmap, model: Any, target: Target<Bitmap?>?,                dataSource: DataSource, isFirstResource: Boolean,            ): Boolean {listener.invoke()                return false            }        }    }    fun fetchAllBitmaps(viewPager: ViewPager2): MutableList<Bitmap> {        val bitmaps: MutableList<Bitmap> = mutableListOf()        paths.forEachIndexed { index, path ->            val recyclerView = viewPager.getChildAt(0) as? RecyclerView            val holder = recyclerView?.findViewHolderForAdapterPosition(index) as? DataViewHolder            getViewHolderForPosition(viewPager = viewPager, index = index) {                it.binding.apply {                    val bitmap = imageCrop.crop()                    val gpuImage = GPUImage(context)                    gpuImage.setImage(bitmap)                    val updatedBitmap = when (path.filter) {                        FILTER_BW -> { // b/w                            val filter = GPUBWFilter(2.0f)                            filter.setBlendBitmap(bitmap)                            gpuImage.setFilter(filter)                            gpuImage.bitmapWithFilterApplied                        }                        FILTER_SKETCH -> { // sketch                            gpuImage.setFilter(GPUImageSketchFilter())                            gpuImage.bitmapWithFilterApplied                        }                        FILTER_MONOCHROME -> { // monochrome                            gpuImage.setFilter(GPUImageMonochromeFilter())                            gpuImage.bitmapWithFilterApplied                        }                        FILTER_TOON -> { // toon                            gpuImage.setFilter(GPUImageToonFilter())                            gpuImage.bitmapWithFilterApplied                        }                        FILTER_SHARPEN -> { // sharpen                            gpuImage.setFilter(GPUImageSharpenFilter())                            gpuImage.bitmapWithFilterApplied                        }                        FILTER_CONTRAST -> { // contrast                            gpuImage.setFilter(GPUImageContrastFilter(2F))                            gpuImage.bitmapWithFilterApplied                        }                        FILTER_BRIGHTNESS -> { // brightness                            gpuImage.setFilter(GPUImageBrightnessFilter(0.2F))                            gpuImage.bitmapWithFilterApplied                        }                        else -> { // original                            gpuImage.setFilter(GPUImageFilter())                            gpuImage.bitmapWithFilterApplied                        }                    }                    bitmaps.add(updatedBitmap)                }            }        }        return bitmaps    }    class DataViewHolder(val binding: LayoutRowItemEditScannedBinding) : RecyclerView.ViewHolder(binding.root)    class AddNewViewHolder(val binding: LayoutRowItemAddScannedBinding) : RecyclerView.ViewHolder(binding.root)}